import {readMap, findBestPos, generateRays, completeVaporization} from "../src/d10";
import "jasmine";

describe("star1 examples", function() {
  const cases: [number, [number, number], string][] = [
    [8, [3, 4],
     '.#..#\n' +
     '.....\n' +
     '#####\n' +
     '....#\n' +
     '...##\n'],
    [33, [5, 8],
     '......#.#.\n' +
     '#..#.#....\n' +
     '..#######.\n' +
     '.#.#.###..\n' +
     '.#..#.....\n' +
     '..#....#.#\n' +
     '#..#....#.\n' +
     '.##.#..###\n' +
     '##...#..#.\n' +
     '.#....####\n'],
    [35, [1, 2],
     '#.#...#.#.\n' +
     '.###....#.\n' +
     '.#....#...\n' +
     '##.#.#.#.#\n' +
     '....#.#.#.\n' +
     '.##..###.#\n' +
     '..#...##..\n' +
     '..##....##\n' +
     '......#...\n' +
     '.####.###.\n'],
    [41, [6, 3],
     '.#..#..###\n' +
     '####.###.#\n' +
     '....###.#.\n' +
     '..###.##.#\n' +
     '##.##.#.#.\n' +
     '....###..#\n' +
     '..#.#..#.#\n' +
     '#..#.#.###\n' +
     '.##...##.#\n' +
     '.....#.#..\n'],
    [210, [11, 13],
     '.#..##.###...#######\n' +
     '##.############..##.\n' +
     '.#.######.########.#\n' +
     '.###.#######.####.#.\n' +
     '#####.##.#.##.###.##\n' +
     '..#####..#.#########\n' +
     '####################\n' +
     '#.####....###.#.#.##\n' +
     '##.#################\n' +
     '#####.##.###..####..\n' +
     '..######..##.#######\n' +
     '####.##.####...##..#\n' +
     '.#####..#.######.###\n' +
     '##...#.##########...\n' +
     '#.##########.#######\n' +
     '.####.#.###.###.#.##\n' +
     '....##.##.###..#####\n' +
     '.#.#.###########.###\n' +
     '#.#.#.#####.####.###\n' +
     '###.##.####.##.#..##\n'],
  ];

  for (let [score, pos, strmap] of cases) {
    it (`expect ${score} at ${pos}`, function() {
      let map = readMap(strmap);
      let rays = generateRays(map.width, map.height);
      expect(findBestPos(map, rays)).toEqual([score, pos]);
    });
  }
});

describe("star2 examples", function() {
  const cases: [[number, number], [number, number], string][] = [
    [[11, 13], [8, 2],
     '.#..##.###...#######\n' +
     '##.############..##.\n' +
     '.#.######.########.#\n' +
     '.###.#######.####.#.\n' +
     '#####.##.#.##.###.##\n' +
     '..#####..#.#########\n' +
     '####################\n' +
     '#.####....###.#.#.##\n' +
     '##.#################\n' +
     '#####.##.###..####..\n' +
     '..######..##.#######\n' +
     '####.##.####...##..#\n' +
     '.#####..#.######.###\n' +
     '##...#.##########...\n' +
     '#.##########.#######\n' +
     '.####.#.###.###.#.##\n' +
     '....##.##.###..#####\n' +
     '.#.#.###########.###\n' +
     '#.#.#.#####.####.###\n' +
     '###.##.####.##.#..##\n'],
  ];

  for (let [pos, result, strmap] of cases) {
    it (`expect ${result} with station at ${pos}`, function() {
      let map = readMap(strmap);
      let rays = generateRays(map.width, map.height);
      expect(completeVaporization(map, rays, pos[0] ,pos[1])[199]).toEqual(result);
    });
  }
});
